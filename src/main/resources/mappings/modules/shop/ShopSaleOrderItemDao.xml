<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thinkgem.jeesite.modules.shop.dao.ShopSaleOrderItemDao">
    
	<sql id="shopSaleOrderItemColumns">
		a.id AS "id",
		a.sale_id AS "shopSaleOrder.id",
		a.product_id AS "productId",
		a.product_name AS "productName",
		a.product_no AS "productNo",
		a.unit AS "unit",
		a.spec AS "spec",
		a.sale_num AS "saleNum",
		a.stock_num AS "stockNum",
		a.sale_money AS "saleMoney",
		a.discount AS "discount",
		a.dis_money AS "disMoney",
		a.all_money AS "allMoney",
		a.count_money AS "countMoney",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.remarks AS "remarks",
		a.del_flag AS "delFlag"
	</sql>
	
	<sql id="shopSaleOrderItemJoins">
		inner JOIN shop_sale_order b ON b.id = a.sale_id
	</sql>
    
	<select id="get" resultType="ShopSaleOrderItem">
		SELECT 
			<include refid="shopSaleOrderItemColumns"/>
		FROM shop_sale_order_item a
		<include refid="shopSaleOrderItemJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="ShopSaleOrderItem">
		SELECT 
			<include refid="shopSaleOrderItemColumns"/>
		FROM shop_sale_order_item a
		<include refid="shopSaleOrderItemJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="shopSaleOrder!= null and shopSaleOrder.id != null and shopSaleOrder.id != ''">
				AND a.sale_id = #{shopSaleOrder.id}
			</if>
			
			<if test="customerId != null and customerId != ''">
				AND b.customer_id = #{customerId}
			</if>
			<if test="saleNo != null and saleNo != ''">
				AND b.sale_no like concat('%',#{shopSaleOrder.saleNo},'%')
			</if>
			<if test="beginBusinData != null and endBusinData != null and beginBusinData != '' and endBusinData != ''">
				AND b.busin_data BETWEEN #{shopSaleOrder.beginBusinData} AND #{shopSaleOrder.endBusinData}
			</if>
			<if test="officeId != null and officeId != ''">
				AND b.office_id = #{officeId}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_date ASC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="ShopSaleOrderItem">
		SELECT 
			<include refid="shopSaleOrderItemColumns"/>
		FROM shop_sale_order_item a
		<include refid="shopSaleOrderItemJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_date ASC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO shop_sale_order_item(
			id,
			sale_id,
			product_id,
			product_name,
			product_no,
			unit,
			spec,
			sale_num,
			stock_num,
			sale_money,
			discount,
			dis_money,
			all_money,
			count_money,
			create_by,
			create_date,
			update_by,
			update_date,
			remarks,
			del_flag
		) VALUES (
			#{id},
			#{shopSaleOrder.id},
			#{productId},
			#{productName},
			#{productNo},
			#{unit},
			#{spec},
			#{saleNum},
			#{stockNum},
			#{saleMoney},
			#{discount},
			#{disMoney},
			#{allMoney},
			#{countMoney},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE shop_sale_order_item SET 	
			sale_id = #{shopSaleOrder.id},
			product_id = #{productId},
			product_name = #{productName},
			product_no = #{productNo},
			unit = #{unit},
			spec = #{spec},
			sale_num = #{saleNum},
			stock_num = #{stockNum},
			sale_money = #{saleMoney},
			discount = #{discount},
			dis_money = #{disMoney},
			all_money = #{allMoney},
			count_money = #{countMoney},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE shop_sale_order_item SET 
			del_flag = #{DEL_FLAG_DELETE}
		<choose>
			<when test="id !=null and id != ''">
				WHERE id = #{id}
			</when>
			<otherwise>
				WHERE sale_id = #{shopSaleOrder.id}
			</otherwise>
		</choose>
	</update>
	
	<select id="findSumItem" resultType="ShopSaleOrderItem">
		SELECT 
			b.office_id AS "officeId",
			sum(a.sale_num) AS sumProduct,
			sum(a.count_money) AS sumMoney,
			sum(a.count_money*a.sale_num-c.buy_price*a.sale_num) AS sumProfit 
		FROM shop_sale_order_item a 
		inner join shop_sale_order b ON b.id = a.sale_id 
		inner join SHOP_PRODUCT c ON a.product_id = c.id 
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} 
			<if test="customerId != null and customerId != ''">
				AND b.customer_id = #{customerId}
			</if>
			<if test="saleNo != null and saleNo != ''">
				AND b.sale_no like concat('%',#{shopSaleOrder.saleNo},'%')
			</if>
			<if test="beginBusinData != null and endBusinData != null and beginBusinData != '' and endBusinData != ''">
				AND b.busin_data BETWEEN #{shopSaleOrder.beginBusinData} AND #{shopSaleOrder.endBusinData}
			</if>
			<if test="officeId != null and officeId != ''">
				AND b.office_id = #{officeId}
			</if>
		</where>
		group by b.office_id 
	</select>	
	
	<select id="findItemPage" resultType="ShopSaleOrderItem">
		SELECT 
			a.id AS "id",
			a.sale_id AS "shopSaleOrder.id",
			a.product_id AS "productId",
			concat(a.product_name,'(',c.product_char,')') AS "productName",
			a.product_no AS "productNo",
			a.unit AS "unit",
			a.spec AS "spec",
			a.sale_num AS "saleNum",
			a.stock_num AS "stockNum",
			a.sale_money AS "saleMoney",
			a.discount AS "discount",
			a.dis_money AS "disMoney",
			a.all_money AS "allMoney",
			a.count_money AS "countMoney",
			a.create_by AS "createBy.id",
			a.create_date AS "createDate",
			a.update_by AS "updateBy.id",
			a.update_date AS "updateDate",
			a.remarks AS "remarks",
			b.sale_no AS "shopSaleOrder.saleNo",
			b.customer_name AS "shopSaleOrder.customerName"
		FROM shop_sale_order_item a 
		inner join shop_sale_order b ON b.id = a.sale_id 
		inner join SHOP_PRODUCT c ON a.product_id = c.id 
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="customerId != null and customerId != ''">
				AND b.customer_id = #{customerId}
			</if>
			<if test="saleNo != null and saleNo != ''">
				AND b.sale_no like concat('%',#{shopSaleOrder.saleNo},'%')
			</if>
			<if test="beginBusinData != null and endBusinData != null and beginBusinData != '' and endBusinData != ''">
				AND b.busin_data BETWEEN #{shopSaleOrder.beginBusinData} AND #{shopSaleOrder.endBusinData}
			</if>
			<if test="officeId != null and officeId != ''">
				AND b.office_id = #{officeId}
			</if>
		</where>
		order by c.list_no 
	</select>	
	
	<select id="findGroupByProductPage" resultType="ShopSaleOrderItem">
		SELECT 
			a.product_id AS "productId",
			concat(a.product_name,'(',c.product_char,')') AS "productName",
			a.product_no AS "productNo",
			a.unit AS "unit",
			a.spec AS "spec",
			sum(a.sale_num) AS "saleNum",
			a.sale_money AS "saleMoney",
			a.discount AS "discount",
			a.dis_money AS "disMoney",
			sum(a.all_money) AS "allMoney",
			sum(a.count_money) AS "countMoney"
		FROM shop_sale_order_item a 
		inner join shop_sale_order b ON b.id = a.sale_id 
		inner join SHOP_PRODUCT c ON a.product_id = c.id 
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="customerId != null and customerId != ''">
				AND b.customer_id = #{customerId}
			</if>
			<if test="saleNo != null and saleNo != ''">
				AND b.sale_no like concat('%',#{shopSaleOrder.saleNo},'%')
			</if>
			<if test="beginBusinData != null and endBusinData != null and beginBusinData != '' and endBusinData != ''">
				AND b.busin_data BETWEEN #{shopSaleOrder.beginBusinData} AND #{shopSaleOrder.endBusinData}
			</if>
			<if test="officeId != null and officeId != ''">
				AND b.office_id = #{officeId}
			</if>
		</where> 
		group by a.product_id,a.product_name,c.product_char,a.product_no,a.unit,a.spec,a.sale_money,a.dis_money
		order by c.list_no 
	</select>
	
	<select id="findGroupByCustomerPage" resultType="ShopSaleOrderItem">
		SELECT 
			b.customer_id AS "shopSaleOrder.customerId",
			b.customer_name AS "shopSaleOrder.customerName",
			c.buy_price*sum(a.sale_num) AS "sumBuyPrice",
			sum(a.sale_num) AS "saleNum",
			sum(a.count_money) AS "countMoney",
			sum(a.count_money)-c.buy_price*sum(a.sale_num) AS sumProfit,
			ROUND((sum(a.count_money)-c.buy_price*sum(a.sale_num))/sum(a.count_money)*100,2) AS percentage
		FROM shop_sale_order_item a 
		inner join shop_sale_order b ON b.id = a.sale_id 
		inner join SHOP_PRODUCT c ON a.product_id = c.id 
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="customerId != null and customerId != ''">
				AND b.customer_id = #{customerId}
			</if>
			<if test="saleNo != null and saleNo != ''">
				AND b.sale_no like concat('%',#{shopSaleOrder.saleNo},'%')
			</if>
			<if test="beginBusinData != null and endBusinData != null and beginBusinData != '' and endBusinData != ''">
				AND b.busin_data BETWEEN #{shopSaleOrder.beginBusinData} AND #{shopSaleOrder.endBusinData}
			</if>
			<if test="officeId != null and officeId != ''">
				AND b.office_id = #{officeId}
			</if>
		</where> 
		group by b.customer_id,b.customer_name
		order by b.create_date 
	</select>
</mapper>